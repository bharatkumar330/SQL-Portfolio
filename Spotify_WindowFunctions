-- Step 1: Drop the table if it exists
DROP TABLE IF EXISTS spotify_songs;

-- Step 2: Create the table
CREATE TABLE spotify_songs (
    track_id VARCHAR PRIMARY KEY,
    track_name VARCHAR,
    track_artist VARCHAR,
    track_popularity INTEGER,
    track_album_id VARCHAR,
    track_album_name VARCHAR,
    track_album_release_date DATE,
    playlist_name VARCHAR,
    playlist_id VARCHAR,
    playlist_genre VARCHAR,
    playlist_subgenre VARCHAR,
    danceability FLOAT,
    energy FLOAT,
    key INTEGER,
    loudness FLOAT,
    mode INTEGER,
    speechiness FLOAT,
    acousticness FLOAT,
    instrumentalness FLOAT,
    liveness FLOAT,
    valence FLOAT,
    tempo FLOAT,
    duration_ms INTEGER
);

-- Step 3: Load data from CSV file
-- Note: The file path should be updated based on the actual file location in your environment

COPY spotify_songs(track_id, track_name, track_artist, track_popularity, track_album_id, 
                   track_album_name, track_album_release_date, playlist_name, playlist_id, 
                   playlist_genre, playlist_subgenre, danceability, energy, key, loudness, 
                   mode, speechiness, acousticness, instrumentalness, liveness, valence, 
                   tempo, duration_ms)
FROM '/path/to/your/spotify_songs.csv' 
DELIMITER ',' 
CSV HEADER;

-- Step 4: Perform analysis using window functions

-- 4.1: Find the top 10 most popular tracks using row_number()
SELECT track_name, track_artist, track_popularity
FROM (
    SELECT track_name, track_artist, track_popularity,
           ROW_NUMBER() OVER (ORDER BY track_popularity DESC) AS row_num
    FROM spotify_songs
) sub
WHERE row_num <= 10;

-- 4.2: Find the average danceability and energy by genre using window functions
SELECT DISTINCT playlist_genre,
       AVG(danceability) OVER (PARTITION BY playlist_genre) AS avg_danceability,
       AVG(energy) OVER (PARTITION BY playlist_genre) AS avg_energy
FROM spotify_songs;

-- 4.3: Find the distribution of tracks by release year using window functions
SELECT DISTINCT EXTRACT(YEAR FROM track_album_release_date) AS release_year,
       COUNT(*) OVER (PARTITION BY EXTRACT(YEAR FROM track_album_release_date)) AS track_count
FROM spotify_songs
ORDER BY release_year;

-- 4.4: Find the top 5 artists with the most tracks in the dataset using rank()
SELECT track_artist, track_count
FROM (
    SELECT track_artist, COUNT(*) AS track_count,
           RANK() OVER (ORDER BY COUNT(*) DESC) AS artist_rank
    FROM spotify_songs
    GROUP BY track_artist
) sub
WHERE artist_rank <= 5;

-- 4.5: Calculate the average loudness and valence for tracks in each mode (major/minor) using window functions
SELECT DISTINCT mode,
       AVG(loudness) OVER (PARTITION BY mode) AS avg_loudness,
       AVG(valence) OVER (PARTITION BY mode) AS avg_valence
FROM spotify_songs;

-- 4.6: Find the longest and shortest tracks using window functions
SELECT track_name, track_artist, duration_ms
FROM (
    SELECT track_name, track_artist, duration_ms,
           ROW_NUMBER() OVER (ORDER BY duration_ms DESC) AS row_num
    FROM spotify_songs
) sub
WHERE row_num = 1;

SELECT track_name, track_artist, duration_ms
FROM (
    SELECT track_name, track_artist, duration_ms,
           ROW_NUMBER() OVER (ORDER BY duration_ms ASC) AS row_num
    FROM spotify_songs
) sub
WHERE row_num = 1;
